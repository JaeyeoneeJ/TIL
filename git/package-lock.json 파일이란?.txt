- 일반적으로 node_modules와 같은 폴더는 일반적으로 git push에 포함하지 않는다.
- 미니프로젝트를 진행하던 중, 다른 사람이 merge한 main branch의 소스 코드를 다운받으면 내 로컬 환경에서 정상적으로 실행되지 않는 경우가 종종 발생했다.
- 나의 경우, yarn으로 프로젝트를 생성했었기 때문에, yarn install을 실행해도 환경이 달라 문제가 발생했다.
- 구글링 중, yarn.lock을 push하지 않아 발생하는 문제라는 것을 깨닫고, npm에서도 같은 역할을 하는 package-lock.json에 대해 찾아보았다.

[Package-lock.json 파일이란?]
- package-lock.json은 node_modules 트리나 package.json 파일을 수정하게 되면 자동으로 생성되는 파일이다.
- 협업을 하기 위해 우리는 같은 package.json을 사용해서 각자의 컴퓨터에 같은 패키지들을 설치해서 같은 개발환경을 구성하게 된다.
- package-lock.json은 패키지들의 버전 정보를 저장하고 협업할 때 같은 패키지 버전을 다운받을 수 있도록 도와준다.

=> package-lock.json 파일은 관련된 패키지 버전들을 자동으로 관리하는 역할을 해준다!
* yarn에서도 yarn.lock이 package-lock.json과 같은 역할을 한다.

예시)
- A가 npm으로 프로젝트를 만든 경우 node_modules 폴더를 제외하고 package.json 파일만을 같이 커밋함.
- B가 소스 코드를 Pull 하고 npm install(npm으로 프로젝트를 만들었으므로)을 실행.
- B의 로컬 환경의 의존성 트리가 A가 셋팅한 환경과 동일하게 설치됨.

